{"version":3,"sources":["webpack://animation-assistant/./src/scripts/AnimationAssistant.js","webpack://animation-assistant/./src/scripts/development.js","webpack://animation-assistant/./src/ru-index.html","webpack://animation-assistant/webpack/bootstrap","webpack://animation-assistant/webpack/runtime/compat get default export","webpack://animation-assistant/webpack/runtime/define property getters","webpack://animation-assistant/webpack/runtime/hasOwnProperty shorthand","webpack://animation-assistant/webpack/runtime/jsonp chunk loading","webpack://animation-assistant/webpack/startup"],"names":["AnimationAssistant","constructor","selector","this","elements","getElementsBySelector","library","mobile","hide","document","querySelectorAll","element","getBoundingClientRect","top","bottom","Math","trunc","documentElement","clientHeight","max","body","scrollHeight","offsetHeight","getOffsetTop","getMaxHeightOfPage","hidden","offset","name","animationEnd","elementFromTop","forEach","offsetTop","offsetBottom","getOffsetBottom","percentOfOffset","getPercentOfOffset","isEndOfPage","classList","add","addEventListener","style","visibility","setLibrary","getLibraryPrefix","onPhone","value","Number","addClasses","classes","className","hideAtStart","adaptEnvironment","parentElement","tagName","prev","previousElementSibling","div","createElement","overflow","append","insertAdjacentElement","setAnimation","clientWidth","showElements","window","pageYOffset","scrollEventForElement","bind","play","timeout","Promise","resolve","remove","ASoldClassName","setTimeout","animationCssExamplePlay","then","res","querySelector","once","animationCssExampleSetAnimation","animationCssExampleSetAnimation2","animationCssExampleAddClasses","cssAnimationExample","cssAnimationExampleInfinity","cssAnimationExampleBreak","cssAnimationExampleSequence","catch","err","Error","cssShake","cssShakeChunk","magicCss","repaintlessCss","tuesdayCss","module","exports","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","m","x","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","installedChunks","179","917","deferredModules","checkDeferredModules","webpackJsonpCallback","parentChunkLoadingFunction","data","chunkId","chunkIds","moreModules","runtime","executeModules","i","resolves","length","push","shift","apply","chunkLoadingGlobal","self","checkDeferredModulesImpl","result","deferredModule","fulfilled","j","depId","splice","s","startup"],"mappings":"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","file":"scripts/main.js","sourcesContent":["class AnimationAssistant {\r\n    constructor(selector) {\r\n        this.selector = selector;\r\n        this.elements = AnimationAssistant.getElementsBySelector(this.selector);\r\n        this.library = null;\r\n        this.mobile = null;\r\n        this.hide = false;\r\n    }\r\n\r\n    static getElementsBySelector(selector) {\r\n        return document.querySelectorAll(`.${selector}`);\r\n    }\r\n\r\n    static getOffsetTop(element) {\r\n        return element.getBoundingClientRect().top;\r\n    }\r\n\r\n    static getOffsetBottom(element) {\r\n        return element.getBoundingClientRect().bottom;\r\n    }\r\n\r\n    static getPercentOfOffset(top) {\r\n        return Math.trunc((top / document.documentElement.clientHeight) * 100);\r\n    }\r\n\r\n    static getMaxHeightOfPage() {\r\n        return Math.max(\r\n            document.body.scrollHeight,\r\n            document.documentElement.scrollHeight,\r\n            document.body.offsetHeight,\r\n            document.documentElement.offsetHeight,\r\n            document.body.clientHeight,\r\n            document.documentElement.clientHeight,\r\n        );\r\n    }\r\n\r\n    static isEndOfPage() {\r\n        const offsetTop = AnimationAssistant.getOffsetTop(document.documentElement);\r\n        const maxHeightOfPage = AnimationAssistant.getMaxHeightOfPage();\r\n        const clientHeight = document.documentElement.clientHeight;\r\n        const documentElementOffsetTop = (maxHeightOfPage - clientHeight) * -1;\r\n        return offsetTop === documentElementOffsetTop;\r\n    }\r\n\r\n    static scrollEventForElement(elements, hidden, offset, name, animationEnd, elementFromTop) {\r\n        elements.forEach((element) => {\r\n            const offsetTop = AnimationAssistant.getOffsetTop(element);\r\n            const offsetBottom = AnimationAssistant.getOffsetBottom(element);\r\n            const percentOfOffset = AnimationAssistant.getPercentOfOffset(offsetTop);\r\n            const isEndOfPage = AnimationAssistant.isEndOfPage();\r\n            if (elementFromTop) {\r\n                if (offset > percentOfOffset || isEndOfPage) {\r\n                    element.classList.add(name);\r\n                    element.addEventListener('animationend', animationEnd);\r\n                    hidden ? (element.style.visibility = '') : '';\r\n                }\r\n            } else if (!elementFromTop) {\r\n                if (offsetBottom > 0) {\r\n                    element.classList.add(name);\r\n                    element.addEventListener('animationend', animationEnd);\r\n                    hidden ? (element.style.visibility = '') : '';\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    static showElements(elements) {\r\n        elements.forEach((element) => {\r\n            element.style.visibility = '';\r\n        });\r\n    }\r\n\r\n    static getLibraryPrefix(library) {\r\n        const libraries = {\r\n            'animate.css': 'animate__animated',\r\n            'css-animation': 'cssanimation',\r\n            'hover.css': '',\r\n            'css-shake': 'shake',\r\n            'magic.css': 'magictime',\r\n            'repaintless-css': 'element-animated',\r\n            'tuesday-css': 'animated',\r\n        };\r\n        return libraries[library];\r\n    }\r\n\r\n    setLibrary(library) {\r\n        this.library = library;\r\n        this.elements.forEach((element) => {\r\n            element.classList.add(AnimationAssistant.getLibraryPrefix(this.library));\r\n        });\r\n    }\r\n\r\n    onPhone(value) {\r\n        const isNumber = Math.trunc(Number(value));\r\n        if (typeof isNumber === 'number') {\r\n            this.mobile = value;\r\n        }\r\n    }\r\n\r\n    addClasses(classes) {\r\n        this.elements.forEach((element) => {\r\n            classes.forEach((className) => element.classList.add(className));\r\n        });\r\n    }\r\n\r\n    hideAtStart() {\r\n        this.hide = true;\r\n        this.elements.forEach((element) => {\r\n            element.style.visibility = 'hidden';\r\n        });\r\n    }\r\n\r\n    adaptEnvironment() {\r\n        this.elements.forEach((element) => {\r\n            const parent = element.parentElement;\r\n            if (parent.tagName === 'BODY') {\r\n                const prev = element.previousElementSibling;\r\n                const div = document.createElement('div');\r\n                div.style.overflow = 'hidden';\r\n                div.append(element);\r\n                prev\r\n                    ? prev.insertAdjacentElement('afterend', div)\r\n                    : document.body.insertAdjacentElement('afterbegin', element);\r\n            } else {\r\n                element.parentElement.style.overflow = 'hidden';\r\n            }\r\n        });\r\n    }\r\n\r\n    setAnimation(offset, name, animationEnd) {\r\n        const documentWidth = document.documentElement.clientWidth;\r\n        if (documentWidth < this.mobile && this.hide) {\r\n            AnimationAssistant.showElements(this.elements);\r\n            return;\r\n        }\r\n        this.elements.forEach((element) => {\r\n            const offsetTop = AnimationAssistant.getOffsetTop(element);\r\n            const elementIsTop = window.pageYOffset < offsetTop + window.pageYOffset;\r\n            if (elementIsTop) {\r\n                window.addEventListener(\r\n                    'scroll',\r\n                    AnimationAssistant.scrollEventForElement.bind(\r\n                        null,\r\n                        this.elements,\r\n                        this.hide,\r\n                        offset,\r\n                        name,\r\n                        animationEnd,\r\n                        true,\r\n                    ),\r\n                );\r\n            } else {\r\n                window.addEventListener(\r\n                    'scroll',\r\n                    AnimationAssistant.scrollEventForElement.bind(\r\n                        null,\r\n                        this.elements,\r\n                        this.hide,\r\n                        offset,\r\n                        name,\r\n                        animationEnd,\r\n                        false,\r\n                    ),\r\n                );\r\n            }\r\n        });\r\n    }\r\n\r\n    play(name, timeout = 2000) {\r\n        const documentWidth = document.documentElement.clientWidth;\r\n        if (documentWidth < this.mobile && this.hide) {\r\n            AnimationAssistant.showElements(this.elements);\r\n            return false;\r\n        }\r\n        return new Promise((resolve) => {\r\n            this.elements.forEach((element) => {\r\n                element.classList.add(name);\r\n                element.classList.remove(element.ASoldClassName);\r\n                element.ASoldClassName = name;\r\n                element.addEventListener('animationend', () => {\r\n                    setTimeout(() => {\r\n                        resolve(this.play.bind(this));\r\n                    }, timeout);\r\n                });\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nexport default AnimationAssistant;\r\n","import '../ru-index.html';\nimport 'animate.css/animate.min.css';\nimport 'hover.css/css/hover-min.css';\nimport 'csshake/dist/csshake.min.css';\nimport 'magic.css/dist/magic.min.css';\nimport 'repaintless/repaintless-css/repaintless.min.css';\nimport AnimationAssistant from './AnimationAssistant';\n\n// animate.css\nconst animationCssExamplePlay = new AnimationAssistant('animation-css-example-play');\nanimationCssExamplePlay.setLibrary('animate.css');\nanimationCssExamplePlay\n    .play('animate__headShake', 2200)\n    .then((res) => res('animate__rubberBand', 4000))\n    .then((res) => res('animate__tada'));\n\nconst button = document.querySelector('button');\nbutton.addEventListener(\n    'click',\n    () => {\n        animationCssExamplePlay\n            .play('animate__headShake', 2200)\n            .then((res) => res('animate__rubberBand', 4000))\n            .then((res) => res('animate__tada'));\n    },\n    { once: true },\n);\n\nconst animationCssExampleSetAnimation = new AnimationAssistant(\n    'animation-css-example-set-animation',\n);\nanimationCssExampleSetAnimation.setLibrary('animate.css');\nanimationCssExampleSetAnimation.setAnimation(20, 'animate__backInRight');\n\nconst animationCssExampleSetAnimation2 = new AnimationAssistant(\n    'animation-css-example-set-animation2',\n);\nanimationCssExampleSetAnimation2.setLibrary('animate.css');\nanimationCssExampleSetAnimation2.adaptEnvironment();\nanimationCssExampleSetAnimation2.hideAtStart();\nanimationCssExampleSetAnimation2.setAnimation(20, 'animate__backInRight');\n\nconst animationCssExampleAddClasses = new AnimationAssistant('animation-css-example-add-classes');\nanimationCssExampleAddClasses.setLibrary('animate.css');\nanimationCssExampleAddClasses.addClasses(['animate__slower', 'animate__repeat-2']);\nanimationCssExampleAddClasses.adaptEnvironment();\nanimationCssExampleAddClasses.hideAtStart();\nanimationCssExampleAddClasses.setAnimation(20, 'animate__backInRight', () => {\n    // something\n});\n\n// cssanimation\nconst cssAnimationExample = new AnimationAssistant('cssanimation-example');\ncssAnimationExample.setLibrary('css-animation');\ncssAnimationExample.hideAtStart();\ncssAnimationExample.setAnimation(20, 'swingInBottom');\n\nconst cssAnimationExampleInfinity = new AnimationAssistant('cssanimation-example-infinity');\ncssAnimationExampleInfinity.setLibrary('css-animation');\ncssAnimationExampleInfinity.setAnimation(20, 'hu__hu__', () => {\n    // something\n});\n\nconst cssAnimationExampleBreak = new AnimationAssistant('cssanimation-example-break');\ncssAnimationExampleBreak.setLibrary('css-animation');\ncssAnimationExampleBreak.setAnimation(20, 'leFadeInLeft');\n\nconst cssAnimationExampleSequence = new AnimationAssistant('cssanimation-example-sequence');\ncssAnimationExampleSequence.setLibrary('css-animation');\ncssAnimationExampleSequence.setAnimation(20, 'leFadeInLeft');\n\n// hover.css\nconst hoverCss = new AnimationAssistant('hover-css');\nhoverCss.play('hvr-bounce-in', 0).catch((err) => {\n    throw new Error(err);\n});\n\nconst hoverCssToLeft = new AnimationAssistant('hover-css-to-left');\nhoverCssToLeft.play('hvr-bounce-to-left', 0).catch((err) => {\n    throw new Error(err);\n});\n\nconst hoverCssCurlTopRight = new AnimationAssistant('hover-css-curl-top-right');\nhoverCssCurlTopRight.play('hvr-curl-top-right', 0).catch((err) => {\n    throw new Error(err);\n});\n\nconst hoverCssSetAnimation = new AnimationAssistant('hover-css-set-animation');\nhoverCssSetAnimation.setAnimation(100, 'hvr-wobble-top', () => {\n    // something\n});\n\n// CSShake\nconst cssShake = new AnimationAssistant('css-shake');\ncssShake.setLibrary('css-shake');\ncssShake.play('shake-slow', 0).catch((err) => {\n    throw new Error(err);\n});\n\nconst cssShakeChunk = new AnimationAssistant('css-shake-chunk');\ncssShakeChunk.addClasses(['shake-constant']);\ncssShakeChunk.setAnimation(20, 'shake-chunk', () => {\n    // этот код не выполнится никогда\n    // так как анимация никогда не закончится\n});\n\n// magic.css\nconst magicCss = new AnimationAssistant('magic-css');\nmagicCss.setLibrary('magic.css');\nmagicCss.hideAtStart();\nmagicCss.setAnimation(20, 'slideDownReturn');\n\n// repaintless-css\nconst repaintlessCss = new AnimationAssistant('repaintless-css');\nrepaintlessCss.setLibrary('repaintless-css');\nrepaintlessCss.hideAtStart();\nrepaintlessCss.setAnimation(20, 'slide-from-top');\n\n// tuesday\nconst tuesdayCss = new AnimationAssistant('tuesday-css');\ntuesdayCss.setLibrary('tuesday-css');\ntuesdayCss.hideAtStart();\ntuesdayCss.setAnimation(20, 'tdPlopIn');\n","// Module\nvar code = \"<!doctype html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <meta name=\\\"viewport\\\" content=\\\"width=device-width,user-scalable=no,initial-scale=1,maximum-scale=1,minimum-scale=1\\\"> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"ie=edge\\\"> <link rel=\\\"stylesheet\\\" href=\\\"https://cdn.jsdelivr.net/gh/yesiamrocks/cssanimation.io@1.0.3/cssanimation.min.css\\\"> <link rel=\\\"stylesheet\\\" href=\\\"https://cdn.jsdelivr.net/gh/shakrmedia/tuesday@v1.1.0/build/tuesday.min.css\\\"/> <title>Animation assistant</title> </head> <style>*{box-sizing:inherit}html{font-family:system-ui,-apple-system,\\\"Segoe UI\\\",Roboto,\\\"Helvetica Neue\\\",Arial,\\\"Noto Sans\\\",\\\"Liberation Sans\\\",sans-serif,\\\"Apple Color Emoji\\\",\\\"Segoe UI Emoji\\\",\\\"Segoe UI Symbol\\\",\\\"Noto Color Emoji\\\";font-size:16px;box-sizing:border-box}body{margin:0;background-color:#000;color:#909090}pre{overflow-x:auto;display:flex;border:1px solid;border-radius:10px;background-color:#272727}code{color:#b5b5b5}a{text-decoration:none;color:#3db9e7}.container{max-width:1400px;margin:30px auto;padding:20px;background-color:#1b1b1b;border-radius:5px;box-shadow:0 0 5px #fffaf0}.header{border-bottom:1px solid teal;margin-bottom:10px;text-align:right}.section-demonstration{display:flex;flex-wrap:wrap}.footer{text-align:right}.heading{display:inline-block;margin:0;padding-bottom:10px;color:#74c4e3}.heading-header{margin-bottom:10px}.text{margin:0;padding-bottom:10px;line-height:1.5}.block{flex-basis:40%;flex-grow:1;border:1px solid #a9a9a9;border-radius:5px;margin-left:5%;margin-right:5%;margin-bottom:10px;padding:10px;background-color:#130523}.info{padding:0 5px;background-color:#053344;color:#ca83e7;border-radius:5px}.notice{margin-bottom:10px;border:1px solid #7e5711;padding:10px;border-radius:10px;background-color:#0f1b1a}.notice-text{margin:0}.button{display:block;max-width:200px;border:1px solid #053344;outline:0;margin-bottom:10px;padding:5px 10px;font-family:inherit;font-size:inherit;border-radius:5px;text-transform:uppercase;user-select:none;cursor:pointer}.ul{margin:0 0 10px;padding:0;list-style-position:inside;list-style-type:circle}.link-item{text-decoration:none;color:#a417d2}.link-item:active{color:#a417d2}.code-comment{color:#909090}.code-new{color:#e141af}.d-block{display:block!important}</style> <body> <div class=\\\"container\\\"> <header class=\\\"header\\\"> <h1 class=\\\"heading heading-header info animateCssPlay\\\">Animation Assistant</h1> </header> <main class=\\\"main\\\"> <section class=\\\"section\\\"> <h2 class=\\\"heading\\\">Введение</h2> <p class=\\\"text\\\"> Плагин <span class=\\\"info\\\">animation-assistant</span> создан для помощи в управлении анимациями на сайте. Он работает со многими известными библиотеками CSS анимаций: </p> <div class=\\\"notice\\\"> <p class=\\\"notice-text\\\"> Обратите внимание на версии приведенных ниже библиотек, если вы работате с устаравшей версией библиотеки, то данный плагин может не корректно работать или перестать работатиь вообще. </p> </div> <ul class=\\\"ul\\\"> <li class=\\\"list-item\\\"><a class=\\\"link-item\\\" href=\\\"#animate.css\\\">animate.css 4.0.0^</a></li> <li class=\\\"list-item\\\"><a class=\\\"link-item\\\" href=\\\"#cssanimation\\\">cssanimation 1.0.0^</a></li> <li class=\\\"list-item\\\"><a class=\\\"link-item\\\" href=\\\"#hover.css\\\">hover.css 2.0.0^</a></li> <li class=\\\"list-item\\\"><a class=\\\"link-item\\\" href=\\\"#CSShake\\\">CSShake 1.5.0^</a></li> <li class=\\\"list-item\\\"><a class=\\\"link-item\\\" href=\\\"#magic.css\\\">magic.css 1.1.0^</a></li> <li class=\\\"list-item\\\"><a class=\\\"link-item\\\" href=\\\"#tuesday\\\">tuesday 1.2.0^</a></li> <li class=\\\"list-item\\\"><a class=\\\"link-item\\\" href=\\\"#repaintless\\\">repaintless 1.3.0^</a></li> <li class=\\\"list-item\\\"><a class=\\\"link-item\\\" href=\\\"#other\\\">Возможно, ваша любимая библиотека CSS анимаций</a></li> </ul> <p class=\\\"text\\\"> Плагин помогает интегрировать их в сайт предоставив готовые JavaScript функции для работы с ними. </p> <div class=\\\"notice\\\"> <p class=\\\"notice-text\\\"> Имейте в виду, что в работе с CSS анимациями есть много подводных камней. Каждая библиотека работает по своему, что только добавляет неудобств. Внимательно читайте документацию. Основные азы работы с плагином описаны в разделе работы с библиотекой <span class=\\\"info\\\">animate.css</span>. Обязательно ознакомьтесь с этим разделом даже если планируете использовать другую библиотеку для CSS анимаций. </p> </div> <h2 class=\\\"heading\\\">Начало работы</h2> <p class=\\\"text\\\"> Установите плагин в ваш проект используя NPM </p> <pre>\\r\\n            <code>\\r\\n            npm install --save animation-assistant\\r\\n            </code>\\r\\n            </pre> <p class=\\\"text\\\"> Подключите его удобным вам способом: </p> <p class=\\\"text\\\"> CommonJS: </p> <pre>\\r\\n            <code>\\r\\n            const AnimationAssistant = require('AnimationAssistant');\\r\\n            </code>\\r\\n            </pre> <p class=\\\"text\\\"> ESM: </p> <pre>\\r\\n            <code>\\r\\n            import AnimationAssistant from 'AnimationAssistant';\\r\\n            </code>\\r\\n            </pre> <p class=\\\"text\\\"> Для начала необходимо получить экземпляр класса <span class=\\\"info\\\">AnimationAssistant</span> вызвав соответствующий конструктор и передав ему CSS селектор анимируемых элементов. Например: </p> <p>HTML</p> <pre>\\r\\n            <code>\\r\\n            &lt;div class=\\\"forAnimation\\\">  &lt;/div>\\r\\n            </code>\\r\\n            </pre> <p>JavaScript</p> <pre>\\r\\n            <code>\\r\\n            const animation = new AnimationAssistant('forAnimation');\\r\\n            </code>\\r\\n            </pre> <p class=\\\"text\\\"> Это может быть как один элемент так и группа элементов: </p> <p>HTML</p> <pre>\\r\\n            <code>\\r\\n            &lt;div class=\\\"your-class\\\">    &lt;/div>\\r\\n            &lt;div class=\\\"your-class\\\">    &lt;/div>\\r\\n            &lt;div class=\\\"your-class\\\">    &lt;/div>\\r\\n            </code>\\r\\n            </pre> <p>JavaScript</p> <pre>\\r\\n            <code>\\r\\n            const animation = new AnimationAssistant('your-class');\\r\\n            </code>\\r\\n            </pre> <p class=\\\"text\\\"> Теперь объекту <span class=\\\"info\\\">animation</span> доступны ряд методов для работы с анимациями. Объект не обязательно должен называться именно так, более того их может (а в некоторых случаях должно) быть несколько, так как каждый объект будет работать только с переданными ему элементами. Мы будем отталкиваться от данного названия просто в качестве примера. </p> <div class=\\\"notice\\\"> <p class=\\\"notice-text\\\"> Не забудьте установить саму библиотеку в качестве зависимости в ваш проект, если это npm или просто добавьте тег link со ссылкой на cdn библиотеки. </p> </div> <p class=\\\"text\\\"> <span class=\\\"info\\\">setLibrary</span> - Подготавливает выбранную CSS библиотеку для работы. Обязательный метод который устанавливает выбранную вами библиотеку для работы с анимациями добавляя необходимый префикс к анимируемым элементам. Например <span class=\\\"info\\\">animation.setLibrary('animate.css')</span> добавит к элементам префикс одной из самых известных CSS библиотек для работы с анимациями - <span class=\\\"info\\\">animate__animated</span> и позволит работать с данной библиотекой. </p> <p class=\\\"text\\\"> <span class=\\\"info\\\">addClasses</span> - Принимает массив с классами. Иногда нам необходимо добавить ряд дополнительных классов к элементам. Допустим, следуя примеру выше - это может быть <span class=\\\"info\\\">animation.addClasses(['animate__slower', 'animate__repeat-2'])</span>, так как мы хотим что-бы анимация была медленной и повторялась два раза. Вы сами можете увидеть эти классы на официальной странице библиотеки <a href=\\\"https://animate.style/\\\">animation.css</a>. В разных библиотеках есть свои вспомогательные классы или классы помощники, вы сможете установить их используя данный метод. Важно понимать, что они будут установленны сразу, не отталкиваясь от позиции на странице, событий и прочего. </p> <p class=\\\"text\\\"> <span class=\\\"info\\\">hideAtStart</span> - Скрывает элемент до начала анимации. Иногда будет лучше скрыть элемент до начала анимации. Например, используя анимацию появления элемента справа будет странно наблюдать за тем как элемент отображается на странице, затем по мере прокрутки до него страбатывает событие и он исчезает что-бы выскочить сбоку. Намного лучше будет спрятать его изначально оставив пустое место там где он находился до срабатывания события. <span class=\\\"info\\\">animation.hideAtStart()</span> решает эту проблему. </p> <p class=\\\"text\\\"> <span class=\\\"info\\\">adaptEnvironment</span> - Адаптирует окружение элемента для корректной работы анимаций. Когда CSS анимация проигрывается на месте или появляется слева или сверху, то пользователь не испытывает никаких неудобств. Как только анимация начнет задействовать нижние и правые края браузера уходя туда под конец действия или появляясь оттуда, то мы можем заметить появление горизонтального скролла или увеличение длины вертикального скролла. Причина этого в том, что сам элемент продолжает занимать место на странице расширяя последнию. Для корректной работы таких анимаций необходимо добавить <span class=\\\"info\\\">overflow: hidden</span> элементу родителю, что и делает этот метод. Если родителем анимируемого элемента является тег <span class=\\\"info\\\">BODY</span>, то данный метод создает специальную заглушку и на этот случай. </p> <p class=\\\"text\\\"> <span class=\\\"info\\\">onPhone</span> - Настраивает разрешение экрана ниже которого не будет проиграна анимация. Например, объект при вызванном методе <span class=\\\"info\\\">animation.onPhone(600)</span> не будет проигрывать анимации, если разрешение экрана пользователя ниже 600px. Он также вернет все скрытые элементы функцией <span class=\\\"info\\\">hideAtStart</span> если они были. </p> <p class=\\\"text\\\"> <span class=\\\"info\\\">setAnimation</span> - Настраивает анимацию для работы. Основной метод для работы с анимациями. Принимает три параметра. <span class=\\\"info\\\">offset</span> - цифра от 1 до 100 обозначающая расстояние в процентах от анимируемого элемента до верхнего края окна браузера для срабатывания анимации. <span class=\\\"info\\\">name</span> - имя анимации, которое предоставляет библиотека. <span class=\\\"info\\\">animationEnd</span> - callback функция, которая будет выполнена после завершения анимации. Примеры приведены ниже. </p> <p class=\\\"text\\\"> <span class=\\\"info\\\">play</span> - Запускает анимацию. В отличии от <span class=\\\"info\\\">setAnimation</span> она запускает анимацию сразу не дожидаясь действия какого дибо события, но забегая наперед - ничто не помешает вам такое событие придумать. Принимает два параметра. <span class=\\\"info\\\">name</span> - имя анимации, которое предоставляет библиотека. <span class=\\\"info\\\">timeout</span> - время, спустя которое должна запуститься следующая анимация со значением по умолчанию в 2000ms. Обратите внимание, что указанное время в параметре <span class=\\\"info\\\">timeout</span> не гарантирует запуск следующей анимации по истечении указанного вами времени или значения по умолчанию если таковое не было задано. Оно гарантирует запуск следующей анимации не раньше, чем указанное вами время. Метод возвращает промис. Примеры приведены ниже. </p> <h2 class=\\\"heading\\\">Общие требования</h2> <p class=\\\"text\\\"> Не зависимо от того с какой библиотекой вы собираетесь работать, вы должны установить ее используя npm или cdn. Затем вам нужно создать новый экземпляр класса <span class=\\\"info\\\">AnimationAssistant</span> передав туда CSS селектор элементов с которыми вы будите работать. Примеры были приведены выше. </p><p class=\\\"text\\\"> Также мы опишем здесь общие методы для работы с элементами независимо от библиотеки: </p> <pre>\\r\\n            <code>\\r\\n            const animation = new AnimationAssistant('your-classes'); <span class=\\\"code-comment\\\">// выбираем нужные нам элементы</span>\\r\\n            animation.setLibrary('your-library'); <span class=\\\"code-comment\\\">// устанавливаем библиотеку</span>\\r\\n            animation.addClasses(['first-class', 'second-class']); <span class=\\\"code-comment\\\">// добавляем нужные классы</span>\\r\\n            animation.hideAtStart(); <span class=\\\"code-comment\\\">// делаем элемент невидимым до начала анимации </span>\\r\\n            animation.adaptEnvironment(); <span class=\\\"code-comment\\\">// адаптируем окружение</span>\\r\\n            animation.onPhone(680); <span class=\\\"code-comment\\\">// не активирует анимации на разрешении экрана менее 680px</span>\\r\\n            </code>\\r\\n            </pre> <p class=\\\"text\\\"> Это были основные методы для работы с анимациями из которых только один является обязательным - <span class=\\\"info\\\">animation.setLibrary('your-library')</span>. </p> <p class=\\\"text\\\"> Два основных метода для работы с анимациями - <span class=\\\"info\\\">setAnimation</span> и <span class=\\\"info\\\">play</span> мы рассмотрим позже вкупе с поддерживаемыми CSS библиотеками анимаций. </p> <h2 class=\\\"heading\\\">Информация о работе плагина</h2> <p class=\\\"text\\\"> Метод <span class=\\\"info\\\">setLibrary</span> является обязательным, не забудьте вызвать его перед началом работы. </p> <p class=\\\"text\\\"> Метод <span class=\\\"info\\\">play</span> является асинхронным и возвращает промис. Используйте его для анимаций элементов на стартовом экране или в собственных событиях для привлечения внимания пользователей к элементу или к его появлению или удалению. Рекомендуется использовать значение <span class=\\\"info\\\">once: true</span> так как многократное взаимодействие этого метода с другими пользовательскими событиями приведет к ошибке. </p> <p class=\\\"text\\\"> Метод <span class=\\\"info\\\">setAnimation</span> настраивает параметр <span class=\\\"info\\\">offset</span> только для элементов, которые будут встречаться при прокрутке вниз. Если прокручивать страницу вверх данный параметр будет проигнорирован а элемент будет проанимирован сразу как только его нижний край сравняется с верхним края окна браузера. </p> <p class=\\\"text\\\"> Методы <span class=\\\"info\\\">setAnimation</span> и <span class=\\\"info\\\">play</span> должны вызываться самыми последними для более корректной работы плагина. </p> <h2 class=\\\"heading\\\">Советы</h2> <p class=\\\"text\\\"> Не анимируйте корневой элемент и <span class=\\\"info\\\">BODY</span>. Это возможно, но делать этого не следует. </p> <p class=\\\"text\\\"> Не используйте анимацию просто так. Анимация - это элемент взаимодействия с пользователем на сайте. Анимацией можно привлечь внимание, напомнить что либо или дать понять что действие было выполнено. </p> <p class=\\\"text\\\"> Используйте одну библиотеку. Плагин поддерживает разные библиотеки, но не стоит использовать их все разом. Не желательно использовать более одной библиотеки на сайте. </p> <p class=\\\"text\\\"> Метод <span class=\\\"info\\\">setAnimation</span> назначает обработчик события <span class=\\\"info\\\">scroll</span> на группу элементов с которыми работает. Помните, что если вы имеете на сайте 10 экземпляров объекта <span class=\\\"info\\\">AnimationAssistant</span>, то у вас в наличии 10 обработчиков на объекте <span class=\\\"info\\\">window</span>. Это вопрос производительности. </p> <p class=\\\"text\\\"> Чаще всего вы захотите использовать параметр <span class=\\\"info\\\">offset</span> в значении 100. В этой позиции элемент будет анимирован сразу после того как его верхний край сравняется с нижним краем окна браузера. В большинстве случаев это то что нам нужно, так как пользователи могу прокручивать страницу очень быстро и просто не заметить анимации, если этот параметр будет установлен в более низком значении, например 10 или 20. </p> <p class=\\\"text\\\"> Библиотека может предоставить анимацию которая будет в бесконечном режиме. В этом случае вы должны быть готовы к ряду ограничений среди которых некорректная работа метода <span class=\\\"info\\\">play</span> и невозможность вызвать callback функцию в методе <span class=\\\"info\\\">setAnimation</span>. </p> <div class=\\\"notice\\\"> <p class=\\\"notice-text\\\"> Иногда вы можете заметить странное поведение анимируемых элементов в самом конце страницы. Например вместо двух элементов может проанимироваться только один. Что будет если мы выставим очень маленький параметр <span class=\\\"info\\\">offset</span> для элементов в самом конце документа? По идее они не должны будут активировать анимацию, но в плагине есть специальная заглушка на такие случаи, и как только документ будет прокручен до конца, все находящиеся в пределах видимости пользовательского окна браузера элементы будут проанимированы. Но если анимация будет поднимать элемент снизу-вверх, то из двух элементов стоящих на одном уровне может быть проанимирован только один. Это происходит потому что один анимируемый элемент на секунду растянет вертикальный скролл страницы и следующий элемент, который находится с ним на одном уровне не зафиксирует окончание прокрутки для текущего документа. Для предотвращения таких ситуаций вы можете использовать метод <span class=\\\"info\\\">adaptEnvironment</span>. </p> </div> <h2 class=\\\"heading\\\" id=\\\"animate.css\\\">animate.css</h2> <p class=\\\"text\\\"> Для начала работы с библиотекой <span class=\\\"info\\\">animate.css</span> следует создать новый экземпляр класса и установить библиотеку как зависимость: </p> <pre>\\r\\n            <code>\\r\\n            const animationCssExamplePlay = new AnimationAssistant('animation-css-example-play');\\r\\n            animationCssExamplePlay.setLibrary('animate.css');\\r\\n            </code>\\r\\n            </pre> <p class=\\\"text\\\"> Затем можно вызвать метод <span class=\\\"info\\\">play</span> и проиграть анимацию. Как вы помните данный метод принимает имя анимации и количество миллисекунд для запуска следующей анимации. Перейдя на сайт библиотеки <a href=\\\"https://animate.style/\\\">animate.css</a> можно выбрать интересующие нас анимации, допустим ими оказались: <span class=\\\"info\\\">animate__headShake</span>, <span class=\\\"info\\\">animate__rubberBand</span> и <span class=\\\"info\\\">animate__tada</span>. Установим их: </p> <pre>\\r\\n            <code>\\r\\n            const animationCssExamplePlay = new AnimationAssistant('animation-css-example-play');\\r\\n            animationCssExamplePlay.setLibrary('animate.css');\\r\\n            <span class=\\\"code-new\\\">animationCssExamplePlay.play('animate__headShake', 1500)\\r\\n                .then((res) => res('animate__rubberBand', 2000))\\r\\n                .then((res) => res('animate__tada'))\\r\\n                .catch((err) => console.error(err));\\r\\n            </span>\\r\\n            </code>\\r\\n            </pre> <p class=\\\"text\\\"> Анимация <span class=\\\"info\\\">animate__headShake</span> будет проиграна мгновенно, <span class=\\\"info\\\">animate__rubberBand</span> не раньше чем через 1500 миллисекунд, а <span class=\\\"info\\\">animate__tada</span> не раньше чем через 2000 миллисекунд. Они будут выполняться последовательно. Сам метод возвращает промис у которого может быть вызван метод then. Используем этот метод вместе с данными анимациями и анимируем нижние два блока: </p> <div class=\\\"section-demonstration\\\"> <div class=\\\"block animation-css-example-play\\\"> <h2 class=\\\"heading\\\">animate.css</h2> <p class=\\\"text\\\"> Результат выполнения метода play объекта <span class=\\\"info\\\">animationCssExamplePlay</span>. </p> </div> <div class=\\\"block animation-css-example-play\\\"> <h2 class=\\\"heading\\\">animate.css</h2> <p class=\\\"text\\\"> Результат выполнения метода play объекта <span class=\\\"info\\\">animationCssExamplePlay</span>. </p> </div> </div> <p class=\\\"text\\\"> Наверно вы заметили маленькую проблему, а именно - вы не увидели никакой анимации. Дело в том, что метод <span class=\\\"info\\\">play</span> не назначает никакого события и все анимации проигрываются мгновенно после построения DOM дерева. Что-бы увидеть их просто перезагрузите страницу находясь на этом месте. Вы можете использовать ее только на элементах стартового экрана или как уже было сказано использовать его в своем событие. </p> <p class=\\\"text\\\"> Создадим кнопку и навесим на нее обработчик события click внутри которого запустим нашу функцию. </p> <button class=\\\"button\\\">Кликни меня</button> <p class=\\\"text\\\"> Теперь при нажатие на клавишу срабатывает анимация. Из-за асинхронного характера работы метода <span class=\\\"info\\\">play</span> лучше запускать такой обработчик один раз с флагом <span class=\\\"info\\\">once: true</span>. В противном случае анимация может повести себя некорректно при многократном нажатии. В JavaScript это будет выглядеть следующим образом: </p> <pre>\\r\\n            <code>\\r\\n            const animationCssExamplePlay = new AnimationAssistant('animation-css-example-play');\\r\\n            animationCssExamplePlay.setLibrary('animate.css');\\r\\n\\r\\n            <span class=\\\"code-new\\\">const button = document.querySelector('button');\\r\\n            button.addEventListener('click', () => {\\r\\n                animationCssExamplePlay\\r\\n                    .play('animate__headShake', 2200)\\r\\n                    .then((res) => res('animate__rubberBand', 4000))\\r\\n                    .then((res) => res('animate__tada'));\\r\\n            }, { once: true });\\r\\n            </span>\\r\\n            </code>\\r\\n            </pre> <p class=\\\"text\\\"> Количество анимаций применяемых методом <span class=\\\"info\\\">play</span> ограничено только здравым смыслом. </p> <p class=\\\"text\\\"> Если вы хотите настроить CSS анимацию на срабатывание при прокрутке, тогда воспользуйтесь методом <span class=\\\"info\\\">setAnimation</span>. Как уже было сказано выше он принимает три параметра. <span class=\\\"info\\\">offset</span>, <span class=\\\"info\\\">name</span> и <span class=\\\"info\\\">animationEnd</span>. Для начала следует определиться на каком расстоянии от верхнего края окна до элемента следует начать проигрывать анимацию. За это отвечает параметр <span class=\\\"info\\\">offset</span>. Допустим мы решили, что это будет 20%. То есть как только элемент окажется меньше чем в 20% от верхнего края окна браузера анимация будет проиграна. Затем выберем саму анимацию, пусть это будет <span class=\\\"info\\\">animate__backInRight</span>. Приступим: </p> <pre>\\r\\n            <code>\\r\\n            const animationCssExampleSetAnimation = new AnimationAssistant(\\r\\n                'animation-css-example-set-animation',\\r\\n            );\\r\\n            animationCssExampleSetAnimation.setLibrary('animate.css');\\r\\n            animationCssExampleSetAnimation.setAnimation(20, 'animate__backInRight');\\r\\n            </code>\\r\\n            </pre> <div class=\\\"section-demonstration\\\"> <div class=\\\"block animation-css-example-set-animation\\\"> <h2 class=\\\"heading\\\">animate.css</h2> <p class=\\\"text\\\"> Результат выполнения метода setAnimation объекта <span class=\\\"info\\\">animationCssExampleSetAnimation</span>. </p> </div> <div class=\\\"block animation-css-example-set-animation\\\"> <h2 class=\\\"heading\\\">animate.css</h2> <p class=\\\"text\\\"> Результат выполнения метода setAnimation объекта <span class=\\\"info\\\">animationCssExampleSetAnimation</span>. </p> </div> </div> <p class=\\\"text\\\"> Вы не могли не заметить странного поведения элементов. Как уже было сказано выше, они сначала находятся на своем месте, но в момент срабатывания анимации резко исчезают и появляются справа увеличивая горизонтальный скролл. Именно для таких случаев необходимо воспользоваться рассматриваемыми ранее методами <span class=\\\"info\\\">hideAtStart</span> для скрытия элементов до начала анимации и <span class=\\\"info\\\">adaptEnvironment</span> для адаптации окружения под анимацию. Изменим это: </p> <pre>\\r\\n            <code>\\r\\n            const animationCssExampleSetAnimation2 = new AnimationAssistant(\\r\\n            'animation-css-example-set-animation2',\\r\\n            );\\r\\n            animationCssExampleSetAnimation2.setLibrary('animate.css');\\r\\n            <span class=\\\"code-new\\\">animationCssExampleSetAnimation2.adaptEnvironment();\\r\\n            animationCssExampleSetAnimation2.hideAtStart();</span>\\r\\n            animationCssExampleSetAnimation2.setAnimation(20, 'animate__backInRight');\\r\\n            </code>\\r\\n            </pre> <div class=\\\"section-demonstration\\\"> <div class=\\\"block animation-css-example-set-animation2\\\"> <h2 class=\\\"heading\\\">animate.css</h2> <p class=\\\"text\\\"> Результат выполнения метода setAnimation объекта <span class=\\\"info\\\">animationCssExampleSetAnimation2</span>. Теперь все работает корректно. </p> </div> <div class=\\\"block animation-css-example-set-animation2\\\"> <h2 class=\\\"heading\\\">animate.css</h2> <p class=\\\"text\\\"> Результат выполнения метода setAnimation объекта <span class=\\\"info\\\">animationCssExampleSetAnimation2</span>. Теперь все работает корректно. </p> </div> </div> <p class=\\\"text\\\"> Помимо всего этого нам могут понадобиться дополнительные классы. Например для библиотеки <span class=\\\"info\\\">animate.css</span> это могут быть <span class=\\\"info\\\">animate__slower</span> для более медленного проигрывания анимации и <span class=\\\"info\\\">animate__repeat-2</span> для двукратного повторения анимации. Что-бы их добавить воспользуемся методом <span class=\\\"info\\\">addClasses</span>. </p> <pre>\\r\\n            <code>\\r\\n            const animationCssExampleAddClasses = new AnimationAssistant('animation-css-example-add-classes');\\r\\n            <span class=\\\"code-new\\\">animationCssExampleAddClasses.addClasses(['animate__slower', 'animate__repeat-2']);</span>\\r\\n            animationCssExampleAddClasses.adaptEnvironment();\\r\\n            animationCssExampleAddClasses.hideAtStart();\\r\\n            animationCssExampleAddClasses.setAnimation(20, 'animate__backInRight');\\r\\n            </code>\\r\\n            </pre> <div class=\\\"section-demonstration\\\"> <div class=\\\"block animation-css-example-add-classes\\\"> <h2 class=\\\"heading\\\">animate.css</h2> <p class=\\\"text\\\"> Результат выполнения метода <span class=\\\"info\\\">addClasses</span> объекта <span class=\\\"info\\\">animationCssExampleAddClasses</span>. </p> </div> <div class=\\\"block animation-css-example-add-classes\\\"> <h2 class=\\\"heading\\\">animate.css</h2> <p class=\\\"text\\\"> Результат выполнения метода <span class=\\\"info\\\">addClasses</span> объекта <span class=\\\"info\\\">animationCssExampleAddClasses</span>. Теперь все работает корректно. </p> </div> </div> <p class=\\\"text\\\"> Так-же не забывайте про callback функцию, которая выполнится после завершения анимации. Вы можете передать ее третьим параметром. Мы можем переписать пример выше следующим образом: </p> <pre>\\r\\n            <code>\\r\\n            const animationCssExampleAddClasses = new AnimationAssistant('animation-css-example-add-classes');\\r\\n            animationCssExampleAddClasses.addClasses(['animate__slower', 'animate__repeat-2']);\\r\\n            animationCssExampleAddClasses.adaptEnvironment();\\r\\n            animationCssExampleAddClasses.hideAtStart();\\r\\n            animationCssExampleAddClasses.setAnimation(20, 'animate__backInRight', <span class=\\\"code-new\\\">() => {\\r\\n                <span class=\\\"code-comment\\\">// ваш код...</span>\\r\\n                <span class=\\\"code-comment\\\">// имейте в виду, что в данном случае он выполнится два раза!</span>\\r\\n                <span class=\\\"code-comment\\\">// это происходит из за добавления класса animate__repeat-2</span>\\r\\n                <span class=\\\"code-comment\\\">// помните, что если анимация находится в бесконечном режиме (infinity),</span>\\r\\n                <span class=\\\"code-comment\\\">// то этот колбек не выполнится никогда</span>\\r\\n            });\\r\\n            </span>\\r\\n            </code>\\r\\n            </pre> <h2 class=\\\"heading\\\" id=\\\"cssanimation\\\">cssanimation</h2> <p class=\\\"text\\\"> Для начала работы с библиотекой <span class=\\\"info\\\">cssanimation</span> необходимо получить экземпляр объекта <span class=\\\"info\\\">AnimationAssistant</span> и вызвать метод <span class=\\\"info\\\">setLibrary</span>: </p> <pre>\\r\\n            <code>\\r\\n            const cssAnimationExample = new AnimationAssistant('cssanimation-example');\\r\\n            cssAnimationExample.setLibrary('css-animation');\\r\\n            </code>\\r\\n            </pre> <p class=\\\"text\\\"> После этого можно приступать к установке анимации. Для этого можно перейти на официальный сайт библиотеки <a href=\\\"http://cssanimation.io/\\\">cssanimation</a> и выбрать подходящую анимацию. Пусть это будет <span class=\\\"info\\\">swingInBottom</span>. Установим параметр <span class=\\\"info\\\">offset</span> на 20% и добавим метод <span class=\\\"info\\\">hideAtStart</span> </p> <pre>\\r\\n            <code>\\r\\n            const cssAnimationExample = new AnimationAssistant('cssanimation-example');\\r\\n            cssAnimationExample.setLibrary('css-animation');\\r\\n            cssAnimationExample.hideAtStart();\\r\\n            cssAnimationExample.setAnimation(20, 'swingInBottom');\\r\\n            </code>\\r\\n            </pre> <div class=\\\"section-demonstration\\\"> <div class=\\\"block cssanimation-example\\\"> <h2 class=\\\"heading\\\">cssanimation</h2> <p class=\\\"text\\\"> Результат выполнения метода <span class=\\\"info\\\">setAnimation</span> объекта <span class=\\\"info\\\">cssAnimationExample</span>. </p> </div> <div class=\\\"block cssanimation-example\\\"> <h2 class=\\\"heading\\\">cssanimation</h2> <p class=\\\"text\\\"> Результат выполнения метода setAnimation объекта <span class=\\\"info\\\">cssAnimationExample</span>. </p> </div> </div> <p class=\\\"text\\\"> При работе с этой библиотекой следует обратить внимание на две важные особенности. Во первых многие ее анимации имеют свойство <span class=\\\"info\\\">animation-iteration-count</span> со значением <span class=\\\"info\\\">infinite</span>, а во вторых некоторые её анимации работают с элементами <span class=\\\"info\\\">span</span>, которые вложены в контейнер. В самой документации они обозначаются с классом <span class=\\\"info\\\">sequence</span>, который написан там только для удобства, что-бы понять когда анимация будет работать не с самим элементом, а с его потомками. Метод <span class=\\\"info\\\">play</span> не будет работать, потому что предыдущая анимация никогда не закончится, следовательно новая не начнется. </p> <div class=\\\"notice\\\"> <p class=\\\"notice-text\\\"> Например, в следующем примере callback функция не выполнится никогда, так как анимация длится вечно: </p> </div> <pre>\\r\\n            <code>\\r\\n            const cssAnimationExampleInfinity = new AnimationAssistant('cssanimation-example-infinity');\\r\\n            cssAnimationExampleInfinity.setLibrary('css-animation');\\r\\n            cssAnimationExampleInfinity.setAnimation(20, 'heartbeatFast', () => {\\r\\n                <span class=\\\"code-comment\\\">// эта функция не будет запущена</span>\\r\\n            });\\r\\n            </code>\\r\\n            </pre> <div class=\\\"section-demonstration\\\"> <div class=\\\"block cssanimation-example-infinity\\\"> <h2 class=\\\"heading\\\">cssanimation</h2> <p class=\\\"text\\\"> Функция обратного вызова не сработает так как анимация длится вечно. </p> </div> <div class=\\\"block cssanimation-example-infinity\\\"> <h2 class=\\\"heading\\\">cssanimation</h2> <p class=\\\"text\\\"> Функция обратного вызова не сработает так как анимация длится вечно. </p> </div> </div> <div class=\\\"notice\\\"> <p class=\\\"notice-text\\\"> В этом примере ничего не произойдет, так как анимация <span class=\\\"info\\\">leFadeInLeft</span> работает не с самим элементом а с его потомками, которые являются элементами <span class=\\\"info\\\">span</span>. </p> </div> <pre>\\r\\n            <code>\\r\\n            const cssAnimationExampleBreak = new AnimationAssistant('cssanimation-example-break');\\r\\n            cssAnimationExampleBreak.setLibrary('css-animation');\\r\\n            cssAnimationExampleBreak.setAnimation(20, 'leFadeInLeft');\\r\\n            </code>\\r\\n            </pre> <div class=\\\"section-demonstration\\\"> <div class=\\\"block cssanimation-example-break\\\"> <h2 class=\\\"heading\\\">cssanimation</h2> <p class=\\\"text\\\"> Не работает... </p> </div> <div class=\\\"block cssanimation-example-break\\\"> <h2 class=\\\"heading\\\">cssanimation</h2> <p class=\\\"text\\\"> Не работает... </p> </div> </div> <p class=\\\"text\\\"> То есть нам нужен сам элемент, которому будет задан класс <span class=\\\"info\\\">leFadeInLeft</span> и его потомок, элемент <span class=\\\"info\\\">span</span> на которого анимация будет воздействовать. Следует отметить, что одним элементом потомком здесь не обойтись, так как анимация <span class=\\\"info\\\">leFadeInLeft</span> начинает пролистывать элементы слева - направо по очереди, то есть это должна быть группа элементов. В противном случае он просто вытянет элемент из левого угла целиком. HTML структура должна быть примерно следующей: </p> <pre>\\r\\n            <code>\\r\\n            &lt;div class=\\\"block cssanimation-example-sequence\\\">\\r\\n                &lt;span style=\\\"animation-delay: 100ms\\\">c&lt;/span>\\r\\n                &lt;span style=\\\"animation-delay: 200ms\\\">s&lt;/span>\\r\\n                &lt;span style=\\\"animation-delay: 300ms\\\">s&lt;/span>\\r\\n                &lt;span style=\\\"animation-delay: 400ms\\\">a&lt;/span>\\r\\n                &lt;span style=\\\"animation-delay: 500ms\\\">n&lt;/span>\\r\\n                &lt;span style=\\\"animation-delay: 600ms\\\">i&lt;/span>\\r\\n                &lt;span style=\\\"animation-delay: 700ms\\\">m&lt;/span>\\r\\n                &lt;span style=\\\"animation-delay: 800ms\\\">a&lt;/span>\\r\\n                &lt;span style=\\\"animation-delay: 900ms\\\">t&lt;/span>\\r\\n                &lt;span style=\\\"animation-delay: 1000ms\\\">i&lt;/span>\\r\\n                &lt;span style=\\\"animation-delay: 1100ms\\\">o&lt;/span>\\r\\n                &lt;span style=\\\"animation-delay: 1200ms\\\">n&lt;/span>\\r\\n            &lt;/div>\\r\\n            </code>\\r\\n            </pre> <div class=\\\"notice\\\"> <p class=\\\"notice-text\\\"> <span class=\\\"info\\\">animation-delay</span> тут тоже обязателен. Он должен увеличиваться, желательно на равные отрезки времени от начального элемента. </p> </div> <p class=\\\"text\\\"> JavaScript: </p> <pre>\\r\\n            <code>\\r\\n            const cssAnimationExampleSequence = new AnimationAssistant('cssanimation-example-sequence');\\r\\n            cssAnimationExampleSequence.setLibrary('css-animation');\\r\\n            cssAnimationExampleSequence.setAnimation(20, 'leFadeInLeft');\\r\\n            </code>\\r\\n            </pre> <div class=\\\"section-demonstration\\\"> <div class=\\\"block cssanimation-example-sequence\\\"> <span style=\\\"animation-delay:.1s\\\">c</span> <span style=\\\"animation-delay:.2s\\\">s</span> <span style=\\\"animation-delay:.3s\\\">s</span> <span style=\\\"animation-delay:.4s\\\">a</span> <span style=\\\"animation-delay:.5s\\\">n</span> <span style=\\\"animation-delay:.6s\\\">i</span> <span style=\\\"animation-delay:.7s\\\">m</span> <span style=\\\"animation-delay:.8s\\\">a</span> <span style=\\\"animation-delay:.9s\\\">t</span> <span style=\\\"animation-delay:1s\\\">i</span> <span style=\\\"animation-delay:1.1s\\\">o</span> <span style=\\\"animation-delay:1.2s\\\">n</span> </div> <div class=\\\"block cssanimation-example-sequence\\\"> <span style=\\\"animation-delay:.1s\\\">c</span> <span style=\\\"animation-delay:.2s\\\">s</span> <span style=\\\"animation-delay:.3s\\\">s</span> <span style=\\\"animation-delay:.4s\\\">a</span> <span style=\\\"animation-delay:.5s\\\">n</span> <span style=\\\"animation-delay:.6s\\\">i</span> <span style=\\\"animation-delay:.7s\\\">m</span> <span style=\\\"animation-delay:.8s\\\">a</span> <span style=\\\"animation-delay:.9s\\\">t</span> <span style=\\\"animation-delay:1s\\\">i</span> <span style=\\\"animation-delay:1.1s\\\">o</span> <span style=\\\"animation-delay:1.2s\\\">n</span> </div> </div> <h2 class=\\\"heading\\\" id=\\\"hover.css\\\">hover.css</h2> <p class=\\\"text\\\"> При работе с этой библиотекой вам следует учитывать два важных нюанса. Первый - эта библиотека не предназначена для CSS анимаций в том виде в каком вы их видели ранее, она отвечает за такие состояния элемента как <span class=\\\"info\\\">:hover</span>, <span class=\\\"info\\\">:focus</span> и <span class=\\\"info\\\">:active</span>. Второй - при работе с ней не обязательно вызывать метод <span class=\\\"info\\\">setLibrary</span>. </p> <p class=\\\"text\\\"> Библиотека предназначена для изменения состояния элемента при активном состоянии, наведении или фокусировке. Мы можем использовать ее вызвав метод <span class=\\\"info\\\">play</span> один раз с нулевой задержкой. </p> <p class=\\\"text\\\"> Для начала получим новый экземпляр объекта передав туда интересующий нас селектор а затем вызовем метод для работы с этой библиотекой. Список всех анимаций для работы с этой библиотекой можно посмотреть на их сайте <a href=\\\"http://ianlunn.github.io/Hover/\\\">hover.css/demo</a>. </p> <pre>\\r\\n            <code>\\r\\n            const hoverCss = new AnimationAssistant('hover-css');\\r\\n            hoverCss.play('hvr-bounce-in', 0).catch((err) => {\\r\\n                throw new Error(err);\\r\\n            });\\r\\n            </code>\\r\\n            </pre> <div class=\\\"section-demonstration\\\"> <div class=\\\"block hover-css\\\"> <h2 class=\\\"heading\\\">hover.css</h2> <p class=\\\"text\\\"> Наведи на меня (hvr-bounce-in) </p> </div> <div class=\\\"block hover-css\\\"> <h2 class=\\\"heading\\\">hover.css</h2> <p class=\\\"text\\\"> Наведи на меня (hvr-bounce-in) </p> </div> </div> <pre>\\r\\n            <code>\\r\\n            const hoverCssToLeft = new AnimationAssistant('hover-css-to-left');\\r\\n            hoverCssToLeft.play('hvr-bounce-to-left', 0).catch((err) => {\\r\\n                throw new Error(err);\\r\\n            });\\r\\n            </code>\\r\\n            </pre> <div class=\\\"section-demonstration\\\"> <div class=\\\"block hover-css-to-left\\\"> <h2 class=\\\"heading\\\">hover.css</h2> <p class=\\\"text\\\"> Наведи на меня (hvr-bounce-to-left) </p> </div> <div class=\\\"block hover-css-to-left\\\"> <h2 class=\\\"heading\\\">hover.css</h2> <p class=\\\"text\\\"> Наведи на меня (hvr-bounce-to-left) </p> </div> </div> <pre>\\r\\n            <code>\\r\\n            const hoverCssCurlTopRight = new AnimationAssistant('hover-css-curl-top-right');\\r\\n            hoverCssCurlTopRight.play('hvr-curl-top-right', 0).catch((err) => {\\r\\n                throw new Error(err);\\r\\n            });\\r\\n            </code>\\r\\n            </pre> <div class=\\\"section-demonstration\\\"> <div class=\\\"block hover-css-curl-top-right\\\"> <h2 class=\\\"heading\\\">hover.css</h2> <p class=\\\"text\\\"> Наведи на меня (hvr-curl-top-right) </p> </div> <div class=\\\"block hover-css-curl-top-right\\\"> <h2 class=\\\"heading\\\">hover.css</h2> <p class=\\\"text\\\"> Наведи на меня (hvr-curl-top-right) </p> </div> </div> <div class=\\\"notice\\\"> <p class=\\\"notice-text\\\"> В библиотеке предусмотрены отдельные анимации для иконок. Что-бы узнать больше читайте - <a href=\\\"https://ianlunn.co.uk/articles/hover-css-tutorial-introduction\\\">официальную документацию</a> </p> </div> <p class=\\\"text\\\"> Библиотека проста в использовании и для примеров приведенных выше не обязательно использовать данный плагин. Но вы можете использовать метод <span class=\\\"info\\\">setAnimation</span> со значение <span class=\\\"info\\\">offset</span> равное 100 и запустить callback функцию после завершения анимации. </p> <pre>\\r\\n            <code>\\r\\n            const hoverCssSetAnimation = new AnimationAssistant('hover-css-set-animation');\\r\\n            hoverCssSetAnimation.setAnimation(100, 'hvr-wobble-top', () => {\\r\\n                <span class=\\\"code-comment\\\">// ваш код</span>\\r\\n                <span class=\\\"code-comment\\\">// сработает сразу после завершения анимации</span>\\r\\n                <span class=\\\"code-comment\\\">// если у анимации бесконечная продолжительность</span>\\r\\n                <span class=\\\"code-comment\\\">// а в этой библиотеке есть и такие</span>\\r\\n                <span class=\\\"code-comment\\\">// то этот код не выполнится никогда</span>\\r\\n            });\\r\\n            </code>\\r\\n            </pre> <div class=\\\"section-demonstration\\\"> <div class=\\\"block hover-css-set-animation\\\"> <h2 class=\\\"heading\\\">hover.css</h2> <p class=\\\"text\\\"> Наведи на меня (hvr-curl-top-right) </p> </div> <div class=\\\"block hover-css-set-animation\\\"> <h2 class=\\\"heading\\\">hover.css</h2> <p class=\\\"text\\\"> Наведи на меня (hvr-curl-top-right) </p> </div> </div> <h2 class=\\\"heading\\\" id=\\\"CSShake\\\">CSShake</h2> <p class=\\\"text\\\"> Библиотека в основном предназначена для анимации элементов при наведении, но ею можно воспользоваться и при других событиях. Вызов метода <span class=\\\"info\\\">setLibrary</span> не является обязательным при работе с данной библиотекой. </p> <p class=\\\"text\\\"> Вот простой пример использования библиотеки с данным плагином: </p> <pre>\\r\\n            <code>\\r\\n            const cssShake = new AnimationAssistant('css-shake');\\r\\n            cssShake.setLibrary('css-shake'); <span class=\\\"code-comment\\\">// можно опустить</span>\\r\\n            cssShake.play('shake-slow', 0).catch((err) => {\\r\\n                throw new Error(err);\\r\\n            });\\r\\n            </code>\\r\\n            </pre> <p class=\\\"text\\\"> Мы вазвали метод <span class=\\\"info\\\">play</span> с нулевой задержкой и нужной нам анимацией. Список доступных нам анимаций можно посмотреть <a href=\\\"http://elrumordelaluz.github.io/csshake/\\\">на их сайте</a>. </p> <div class=\\\"section-demonstration\\\"> <div class=\\\"block css-shake\\\"> <h2 class=\\\"heading\\\">CSShake</h2> <p class=\\\"text\\\"> Наведи на меня (shake-slow) </p> </div> <div class=\\\"block css-shake\\\"> <h2 class=\\\"heading\\\">CSShake</h2> <p class=\\\"text\\\"> Наведи на меня (shake-slow) </p> </div> </div> <div class=\\\"notice\\\"> <p class=\\\"notice-text\\\"> Классы этой библиотеки добавляют к элементу два свойства <span class=\\\"info\\\">display: inherit;</span> и <span class=\\\"info\\\">transform-origin: center center;</span>. Если последний не должен нас волновать, то изменения свойства <span class=\\\"info\\\">display</span> на элементе может привести к его некорректному отображению. Два блока выше из-за этого отобразились не так как предполагалось. Имейте это в виду. </p> </div> <p class=\\\"text\\\"> У данной библиотеки имеется один вспомогательный класс для бесконечной анимации - <span class=\\\"info\\\">shake-constant</span>. Мы можем воспользоваться методом <span class=\\\"info\\\">addClasses</span> и добавить его к интересующим нам элементам. Особенность этого класса заключается еще и в том, что он не привязан к событию <span class=\\\"info\\\">:hover</span>. Это означает, что мы можем воспользоваться методом <span class=\\\"info\\\">setAnimation</span> для более гибкой настройки. </p> <pre>\\r\\n            <code>\\r\\n            const cssShakeChunk = new AnimationAssistant('css-shake-chunk');\\r\\n            cssShakeChunk.addClasses(['shake-constant']); <span class=\\\"code-comment\\\">// это всегда должен быть массив</span>\\r\\n            cssShakeChunk.setAnimation(20, 'shake-chunk', () => {\\r\\n                <span class=\\\"code-comment\\\">// этот код не выполнится никогда</span>\\r\\n                <span class=\\\"code-comment\\\">// так как анимация никогда не закончится</span>\\r\\n            });\\r\\n            </code>\\r\\n            </pre> <div class=\\\"section-demonstration\\\"> <div class=\\\"block d-block css-shake-chunk\\\"> <h2 class=\\\"heading\\\">CSShake</h2> <p class=\\\"text\\\"> Результат выполнения класса shake-chunk </p> </div> <div class=\\\"block d-block css-shake-chunk\\\"> <h2 class=\\\"heading\\\">CSShake</h2> <p class=\\\"text\\\"> Результат выполнения класса shake-chunk </p> </div> </div> <h2 class=\\\"heading\\\" id=\\\"magic.css\\\">magic.css</h2> <p class=\\\"text\\\"> Для работы с библиотекой <span class=\\\"info\\\">magic.css</span> необходимо получить экземпляр класса <span class=\\\"info\\\">AnimationAssistant</span> и вызвать метод <span class=\\\"info\\\">setLibrary</span>. Затем выбрать интересующую анимацию. Список всех анимация этой библиотеки можно посмотреть <a href=\\\"https://www.minimamente.com/project/magic/\\\">на их сайте</a>. Для следующего примера будет использован класс <span class=\\\"info\\\">slideDownReturn</span>. Сам элемент будет скрыт до начала анимации методом <span class=\\\"info\\\">hideAtStart</span>, а анимацию запустит основной метод плагина <span class=\\\"info\\\">setAnimation</span>. </p> <pre>\\r\\n            <code>\\r\\n            const magicCss = new AnimationAssistant('magic-css');\\r\\n            magicCss.setLibrary('magic.css');\\r\\n            magicCss.hideAtStart();\\r\\n            magicCss.setAnimation(20, 'slideDownReturn');\\r\\n            </code>\\r\\n            </pre> <div class=\\\"section-demonstration\\\"> <div class=\\\"block magic-css\\\"> <h2 class=\\\"heading\\\">magic.css</h2> <p class=\\\"text\\\"> Результат выполнения класса slideDownReturn </p> </div> <div class=\\\"block magic-css\\\"> <h2 class=\\\"heading\\\">magic.css</h2> <p class=\\\"text\\\"> Результат выполнения класса slideDownReturn </p> </div> </div> <p class=\\\"text\\\"> Если вам нужно изменить время действия анимаций для этой библиотеки, то назначьте свое время создав CSS класс <span class=\\\"info\\\">.magictime</span> и установив свойству <span class=\\\"info\\\">animation-duration</span> интересующее вас значение. Например <span class=\\\"info\\\">animation-duration: 3s</span> для более медленной анимации. Проблема заключается в том, что это будет действовать на все анимации. В нашем случае - на все экземпляры объекта <span class=\\\"info\\\">AnimationAssistant</span>. </p> <p class=\\\"text\\\"> В остальном все работа с этой библиотекой схожа с <span class=\\\"info\\\">animate.css</span>, которая детально разобрана выше. </p> <h2 class=\\\"heading\\\" id=\\\"repaintless\\\">repaintless.css</h2> <p class=\\\"text\\\"> Для работы с библиотекой <span class=\\\"info\\\">repaintless.css</span> необходимо получить экземпляр класса <span class=\\\"info\\\">AnimationAssistant</span> и вызвать метод <span class=\\\"info\\\">setLibrary</span>. Затем выбрать интересующую анимацию. Список всех анимайция этой библиотеки можно посмотреть <a href=\\\"http://szynszyliszys.github.io/repaintless/\\\">на их сайте</a>. Для следующего примера будет использован класс <span class=\\\"info\\\">slide-from-top</span>. Сам элемент будет скрыт до начала анимации методом <span class=\\\"info\\\">hideAtStart</span>, а анимацию запустит основной метод плагина <span class=\\\"info\\\">setAnimation</span>. </p> <pre>\\r\\n            <code>\\r\\n            const repaintlessCss = new AnimationAssistant('repaintless-css');\\r\\n            repaintlessCss.setLibrary('repaintless-css');\\r\\n            repaintlessCss.hideAtStart();\\r\\n            repaintlessCss.setAnimation(20, 'slide-from-top');\\r\\n            </code>\\r\\n            </pre> <div class=\\\"section-demonstration\\\"> <div class=\\\"block repaintless-css\\\"> <h2 class=\\\"heading\\\">repaintless.css</h2> <p class=\\\"text\\\"> Результат выполнения класса slide-from-top </p> </div> <div class=\\\"block repaintless-css\\\"> <h2 class=\\\"heading\\\">repaintless.css</h2> <p class=\\\"text\\\"> Результат выполнения класса slide-from-top </p> </div> </div> <p class=\\\"text\\\"> В остальном все работа с этой библиотекой схожа с <span class=\\\"info\\\">animate.css</span>, которая детально разобрана выше. </p> <h2 class=\\\"heading\\\" id=\\\"tuesday\\\">tuesday</h2> <p class=\\\"text\\\"> Для работы с библиотекой <span class=\\\"info\\\">tuesday</span> необходимо получить экземпляр класса <span class=\\\"info\\\">AnimationAssistant</span> и вызвать метод <span class=\\\"info\\\">setLibrary</span>. Затем выбрать интересующую анимацию. Список всех анимайция этой библиотеки можно посмотреть <a href=\\\"http://shakrmedia.github.io/tuesday/\\\">на их сайте</a>. Для следующего примера будет использован класс <span class=\\\"info\\\">tdPlopIn</span>. Сам элемент будет скрыт до начала анимации методом <span class=\\\"info\\\">hideAtStart</span>, а анимацию запустит основной метод плагина <span class=\\\"info\\\">setAnimation</span>. </p> <pre>\\r\\n            <code>\\r\\n            const tuesdayCss = new AnimationAssistant('tuesday-css');\\r\\n            tuesdayCss.setLibrary('tuesday-css');\\r\\n            tuesdayCss.hideAtStart();\\r\\n            tuesdayCss.setAnimation(20, 'tdPlopIn');\\r\\n            </code>\\r\\n            </pre> <div class=\\\"section-demonstration\\\"> <div class=\\\"block tuesday-css\\\"> <h2 class=\\\"heading\\\">tuesday</h2> <p class=\\\"text\\\"> Результыт выполнения класса tdPlopIn </p> </div> <div class=\\\"block tuesday-css\\\"> <h2 class=\\\"heading\\\">tuesday</h2> <p class=\\\"text\\\"> Результыт выполнения класса tdPlopIn </p> </div> </div> <p class=\\\"text\\\"> В остальном все работа с этой библиотекой схожа с <span class=\\\"info\\\">animate.css</span>, которая детально разобрана выше. </p> <h2 class=\\\"heading\\\" id=\\\"other\\\">Работа с другими CSS библиотеками для анимаций, которые не вошли в список</h2> <p class=\\\"text\\\"> Вы могли неувидеть выше любимую библиотеку CSS анимаций в списке выше. Это не означает, что данный плагин с нею не работает. Возможно они действительно могут быть не совместимы, но вы можете это проверить. </p> <p class=\\\"text\\\"> Все, что вам для этого нужно, это три метода экземпляра объекта <span class=\\\"info\\\">AnimationAssistant</span> - <span class=\\\"info\\\">addClasses</span>, <span class=\\\"info\\\">play</span> и <span class=\\\"info\\\">setAnimation</span>. </p> <p class=\\\"text\\\"> Для начала следует установить вашу библиотеку в проект. Затем нужно выбрать анимируемые элементы и присвоить им css класс. Его нужно будет передать конструктору <span class=\\\"info\\\">AnimationAssistant</span>. Здесь все без изменений. </p> <pre>\\r\\n            <code>\\r\\n            const animated = new AnimationAssistant('your-selector');\\r\\n            </code>\\r\\n            </pre> <p class=\\\"text\\\"> В библиотеке вам нужно найти основной класс для работы с анимациями. Обычно он содержит два поля - <span class=\\\"info\\\">animation-duration</span> и <span class=\\\"info\\\">animation-fill-mode</span>. Например для библиотеки <span class=\\\"info\\\">tuesday</span> это <span class=\\\"info\\\">animated</span>, а для <span class=\\\"info\\\">magic.css</span> это <span class=\\\"info\\\">magictime</span>. Вызовите метод <span class=\\\"info\\\">addClasses</span> и добавьте туда этот класс. </p> <pre>\\r\\n            <code>\\r\\n            const animated = new AnimationAssistant('your-selector');\\r\\n            <span class=\\\"code-new\\\">animated.addClasses(['your-class']);</span>\\r\\n            </code>\\r\\n            </pre> <p class=\\\"text\\\"> Далее следуйте документации библиотеки и выбирая интересующие вас классы добавляйте их в метод <span class=\\\"info\\\">play</span> или <span class=\\\"info\\\">setAnimation</span>. </p> </section> </main> <footer class=\\\"footer\\\"> (c) animation-assistant </footer> </div> </body> </html> \";\n// Exports\nmodule.exports = code;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n// It's empty as some runtime module handles the default behavior\n__webpack_require__.x = function() {};\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// Promise = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t179: 0,\n\t917: 0\n};\n\nvar deferredModules = [\n\t[4371]\n];\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\nvar checkDeferredModules = function() {};\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\tvar executeModules = data[3];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0, resolves = [];\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tresolves.push(installedChunks[chunkId][0]);\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\tfor(moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\twhile(resolves.length) {\n\t\tresolves.shift()();\n\t}\n\n\t// add entry modules from loaded chunk to deferred list\n\tif(executeModules) deferredModules.push.apply(deferredModules, executeModules);\n\n\t// run deferred modules when all chunks ready\n\treturn checkDeferredModules();\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkanimation_assistant\"] = self[\"webpackChunkanimation_assistant\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));\n\nfunction checkDeferredModulesImpl() {\n\tvar result;\n\tfor(var i = 0; i < deferredModules.length; i++) {\n\t\tvar deferredModule = deferredModules[i];\n\t\tvar fulfilled = true;\n\t\tfor(var j = 1; j < deferredModule.length; j++) {\n\t\t\tvar depId = deferredModule[j];\n\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferredModules.splice(i--, 1);\n\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n\t\t}\n\t}\n\tif(deferredModules.length === 0) {\n\t\t__webpack_require__.x();\n\t\t__webpack_require__.x = function() {};\n\t}\n\treturn result;\n}\nvar startup = __webpack_require__.x;\n__webpack_require__.x = function() {\n\t// reset startup function so it can be called again when more startup code is added\n\t__webpack_require__.x = startup || (function() {});\n\treturn (checkDeferredModules = checkDeferredModulesImpl)();\n};","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"sourceRoot":""}